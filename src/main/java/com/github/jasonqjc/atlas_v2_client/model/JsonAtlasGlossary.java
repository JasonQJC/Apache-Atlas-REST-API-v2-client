/*
 * Atlas REST API
 * Atlas exposes a variety of REST endpoints to work with types, entities, lineage and data discovery.
 *
 * OpenAPI spec version: 3.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.jasonqjc.atlas_v2_client.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * JsonAtlasGlossary
 */


public class JsonAtlasGlossary extends JsonAtlasGlossaryBaseObject {
  @JsonProperty("categories")
  private List<JsonAtlasRelatedCategoryHeader> categories = null;

  @JsonProperty("language")
  private String language = null;

  @JsonProperty("terms")
  private List<JsonAtlasRelatedTermHeader> terms = null;

  @JsonProperty("usage")
  private String usage = null;

  public JsonAtlasGlossary categories(List<JsonAtlasRelatedCategoryHeader> categories) {
    this.categories = categories;
    return this;
  }

  public JsonAtlasGlossary addCategoriesItem(JsonAtlasRelatedCategoryHeader categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<JsonAtlasRelatedCategoryHeader>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @Schema(description = "")
  public List<JsonAtlasRelatedCategoryHeader> getCategories() {
    return categories;
  }

  public void setCategories(List<JsonAtlasRelatedCategoryHeader> categories) {
    this.categories = categories;
  }

  public JsonAtlasGlossary language(String language) {
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @Schema(description = "")
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }

  public JsonAtlasGlossary terms(List<JsonAtlasRelatedTermHeader> terms) {
    this.terms = terms;
    return this;
  }

  public JsonAtlasGlossary addTermsItem(JsonAtlasRelatedTermHeader termsItem) {
    if (this.terms == null) {
      this.terms = new ArrayList<JsonAtlasRelatedTermHeader>();
    }
    this.terms.add(termsItem);
    return this;
  }

   /**
   * Get terms
   * @return terms
  **/
  @Schema(description = "")
  public List<JsonAtlasRelatedTermHeader> getTerms() {
    return terms;
  }

  public void setTerms(List<JsonAtlasRelatedTermHeader> terms) {
    this.terms = terms;
  }

  public JsonAtlasGlossary usage(String usage) {
    this.usage = usage;
    return this;
  }

   /**
   * Get usage
   * @return usage
  **/
  @Schema(description = "")
  public String getUsage() {
    return usage;
  }

  public void setUsage(String usage) {
    this.usage = usage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonAtlasGlossary jsonAtlasGlossary = (JsonAtlasGlossary) o;
    return Objects.equals(this.categories, jsonAtlasGlossary.categories) &&
        Objects.equals(this.language, jsonAtlasGlossary.language) &&
        Objects.equals(this.terms, jsonAtlasGlossary.terms) &&
        Objects.equals(this.usage, jsonAtlasGlossary.usage) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, language, terms, usage, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonAtlasGlossary {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
