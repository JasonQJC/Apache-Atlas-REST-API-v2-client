/*
 * Atlas REST API
 * Atlas exposes a variety of REST endpoints to work with types, entities, lineage and data discovery.
 *
 * OpenAPI spec version: 3.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.jasonqjc.atlas_v2_client.model;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Generic filter, to specify search criteria using name/value pairs.
 */
@Schema(description = "Generic filter, to specify search criteria using name/value pairs.")

public class JsonSearchFilter {
  @JsonProperty("getCount")
  private Boolean getCount = null;

  @JsonProperty("maxRows")
  private Long maxRows = null;

  @JsonProperty("params")
  private Map<String, List<String>> params = null;

  @JsonProperty("sortBy")
  private String sortBy = null;

  @JsonProperty("sortType")
  private JsonSortType sortType = null;

  @JsonProperty("startIndex")
  private Long startIndex = null;

  public JsonSearchFilter getCount(Boolean getCount) {
    this.getCount = getCount;
    return this;
  }

   /**
   * Get getCount
   * @return getCount
  **/
  @Schema(description = "")
  public Boolean isGetCount() {
    return getCount;
  }

  public void setGetCount(Boolean getCount) {
    this.getCount = getCount;
  }

  public JsonSearchFilter maxRows(Long maxRows) {
    this.maxRows = maxRows;
    return this;
  }

   /**
   * Get maxRows
   * @return maxRows
  **/
  @Schema(description = "")
  public Long getMaxRows() {
    return maxRows;
  }

  public void setMaxRows(Long maxRows) {
    this.maxRows = maxRows;
  }

  public JsonSearchFilter params(Map<String, List<String>> params) {
    this.params = params;
    return this;
  }

  public JsonSearchFilter putParamsItem(String key, List<String> paramsItem) {
    if (this.params == null) {
      this.params = new HashMap<String, List<String>>();
    }
    this.params.put(key, paramsItem);
    return this;
  }

   /**
   * Get params
   * @return params
  **/
  @Schema(description = "")
  public Map<String, List<String>> getParams() {
    return params;
  }

  public void setParams(Map<String, List<String>> params) {
    this.params = params;
  }

  public JsonSearchFilter sortBy(String sortBy) {
    this.sortBy = sortBy;
    return this;
  }

   /**
   * Get sortBy
   * @return sortBy
  **/
  @Schema(description = "")
  public String getSortBy() {
    return sortBy;
  }

  public void setSortBy(String sortBy) {
    this.sortBy = sortBy;
  }

  public JsonSearchFilter sortType(JsonSortType sortType) {
    this.sortType = sortType;
    return this;
  }

   /**
   * Get sortType
   * @return sortType
  **/
  @Schema(description = "")
  public JsonSortType getSortType() {
    return sortType;
  }

  public void setSortType(JsonSortType sortType) {
    this.sortType = sortType;
  }

  public JsonSearchFilter startIndex(Long startIndex) {
    this.startIndex = startIndex;
    return this;
  }

   /**
   * Get startIndex
   * @return startIndex
  **/
  @Schema(description = "")
  public Long getStartIndex() {
    return startIndex;
  }

  public void setStartIndex(Long startIndex) {
    this.startIndex = startIndex;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonSearchFilter jsonSearchFilter = (JsonSearchFilter) o;
    return Objects.equals(this.getCount, jsonSearchFilter.getCount) &&
        Objects.equals(this.maxRows, jsonSearchFilter.maxRows) &&
        Objects.equals(this.params, jsonSearchFilter.params) &&
        Objects.equals(this.sortBy, jsonSearchFilter.sortBy) &&
        Objects.equals(this.sortType, jsonSearchFilter.sortType) &&
        Objects.equals(this.startIndex, jsonSearchFilter.startIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(getCount, maxRows, params, sortBy, sortType, startIndex);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonSearchFilter {\n");
    
    sb.append("    getCount: ").append(toIndentedString(getCount)).append("\n");
    sb.append("    maxRows: ").append(toIndentedString(maxRows)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    sortType: ").append(toIndentedString(sortType)).append("\n");
    sb.append("    startIndex: ").append(toIndentedString(startIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
