/*
 * Atlas REST API
 * Atlas exposes a variety of REST endpoints to work with types, entities, lineage and data discovery.
 *
 * OpenAPI spec version: 3.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.jasonqjc.atlas_v2_client.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * JsonSearchParameters
 */


public class JsonSearchParameters {
  @JsonProperty("attributes")
  private List<String> attributes = null;

  @JsonProperty("classification")
  private String classification = null;

  @JsonProperty("entityFilters")
  private JsonFilterCriteria entityFilters = null;

  @JsonProperty("excludeDeletedEntities")
  private Boolean excludeDeletedEntities = null;

  @JsonProperty("includeClassificationAttributes")
  private Boolean includeClassificationAttributes = null;

  @JsonProperty("includeSubClassifications")
  private Boolean includeSubClassifications = null;

  @JsonProperty("includeSubTypes")
  private Boolean includeSubTypes = null;

  @JsonProperty("limit")
  private Integer limit = null;

  @JsonProperty("offset")
  private Integer offset = null;

  @JsonProperty("query")
  private String query = null;

  @JsonProperty("sortBy")
  private String sortBy = null;

  @JsonProperty("sortOrder")
  private JsonSortOrder sortOrder = null;

  @JsonProperty("tagFilters")
  private JsonFilterCriteria tagFilters = null;

  @JsonProperty("termName")
  private String termName = null;

  @JsonProperty("typeName")
  private String typeName = null;

  public JsonSearchParameters attributes(List<String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public JsonSearchParameters addAttributesItem(String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<String>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Attribute values included in the results
   * @return attributes
  **/
  @Schema(description = "Attribute values included in the results")
  public List<String> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<String> attributes) {
    this.attributes = attributes;
  }

  public JsonSearchParameters classification(String classification) {
    this.classification = classification;
    return this;
  }

   /**
   * Get classification
   * @return classification
  **/
  @Schema(description = "")
  public String getClassification() {
    return classification;
  }

  public void setClassification(String classification) {
    this.classification = classification;
  }

  public JsonSearchParameters entityFilters(JsonFilterCriteria entityFilters) {
    this.entityFilters = entityFilters;
    return this;
  }

   /**
   * Get entityFilters
   * @return entityFilters
  **/
  @Schema(description = "")
  public JsonFilterCriteria getEntityFilters() {
    return entityFilters;
  }

  public void setEntityFilters(JsonFilterCriteria entityFilters) {
    this.entityFilters = entityFilters;
  }

  public JsonSearchParameters excludeDeletedEntities(Boolean excludeDeletedEntities) {
    this.excludeDeletedEntities = excludeDeletedEntities;
    return this;
  }

   /**
   * Get excludeDeletedEntities
   * @return excludeDeletedEntities
  **/
  @Schema(description = "")
  public Boolean isExcludeDeletedEntities() {
    return excludeDeletedEntities;
  }

  public void setExcludeDeletedEntities(Boolean excludeDeletedEntities) {
    this.excludeDeletedEntities = excludeDeletedEntities;
  }

  public JsonSearchParameters includeClassificationAttributes(Boolean includeClassificationAttributes) {
    this.includeClassificationAttributes = includeClassificationAttributes;
    return this;
  }

   /**
   * Get includeClassificationAttributes
   * @return includeClassificationAttributes
  **/
  @Schema(description = "")
  public Boolean isIncludeClassificationAttributes() {
    return includeClassificationAttributes;
  }

  public void setIncludeClassificationAttributes(Boolean includeClassificationAttributes) {
    this.includeClassificationAttributes = includeClassificationAttributes;
  }

  public JsonSearchParameters includeSubClassifications(Boolean includeSubClassifications) {
    this.includeSubClassifications = includeSubClassifications;
    return this;
  }

   /**
   * Get includeSubClassifications
   * @return includeSubClassifications
  **/
  @Schema(description = "")
  public Boolean isIncludeSubClassifications() {
    return includeSubClassifications;
  }

  public void setIncludeSubClassifications(Boolean includeSubClassifications) {
    this.includeSubClassifications = includeSubClassifications;
  }

  public JsonSearchParameters includeSubTypes(Boolean includeSubTypes) {
    this.includeSubTypes = includeSubTypes;
    return this;
  }

   /**
   * Get includeSubTypes
   * @return includeSubTypes
  **/
  @Schema(description = "")
  public Boolean isIncludeSubTypes() {
    return includeSubTypes;
  }

  public void setIncludeSubTypes(Boolean includeSubTypes) {
    this.includeSubTypes = includeSubTypes;
  }

  public JsonSearchParameters limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @Schema(description = "")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public JsonSearchParameters offset(Integer offset) {
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @Schema(description = "")
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }

  public JsonSearchParameters query(String query) {
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @Schema(description = "")
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }

  public JsonSearchParameters sortBy(String sortBy) {
    this.sortBy = sortBy;
    return this;
  }

   /**
   * Get sortBy
   * @return sortBy
  **/
  @Schema(description = "")
  public String getSortBy() {
    return sortBy;
  }

  public void setSortBy(String sortBy) {
    this.sortBy = sortBy;
  }

  public JsonSearchParameters sortOrder(JsonSortOrder sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * Get sortOrder
   * @return sortOrder
  **/
  @Schema(description = "")
  public JsonSortOrder getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(JsonSortOrder sortOrder) {
    this.sortOrder = sortOrder;
  }

  public JsonSearchParameters tagFilters(JsonFilterCriteria tagFilters) {
    this.tagFilters = tagFilters;
    return this;
  }

   /**
   * Get tagFilters
   * @return tagFilters
  **/
  @Schema(description = "")
  public JsonFilterCriteria getTagFilters() {
    return tagFilters;
  }

  public void setTagFilters(JsonFilterCriteria tagFilters) {
    this.tagFilters = tagFilters;
  }

  public JsonSearchParameters termName(String termName) {
    this.termName = termName;
    return this;
  }

   /**
   * Get termName
   * @return termName
  **/
  @Schema(description = "")
  public String getTermName() {
    return termName;
  }

  public void setTermName(String termName) {
    this.termName = termName;
  }

  public JsonSearchParameters typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

   /**
   * Get typeName
   * @return typeName
  **/
  @Schema(description = "")
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonSearchParameters jsonSearchParameters = (JsonSearchParameters) o;
    return Objects.equals(this.attributes, jsonSearchParameters.attributes) &&
        Objects.equals(this.classification, jsonSearchParameters.classification) &&
        Objects.equals(this.entityFilters, jsonSearchParameters.entityFilters) &&
        Objects.equals(this.excludeDeletedEntities, jsonSearchParameters.excludeDeletedEntities) &&
        Objects.equals(this.includeClassificationAttributes, jsonSearchParameters.includeClassificationAttributes) &&
        Objects.equals(this.includeSubClassifications, jsonSearchParameters.includeSubClassifications) &&
        Objects.equals(this.includeSubTypes, jsonSearchParameters.includeSubTypes) &&
        Objects.equals(this.limit, jsonSearchParameters.limit) &&
        Objects.equals(this.offset, jsonSearchParameters.offset) &&
        Objects.equals(this.query, jsonSearchParameters.query) &&
        Objects.equals(this.sortBy, jsonSearchParameters.sortBy) &&
        Objects.equals(this.sortOrder, jsonSearchParameters.sortOrder) &&
        Objects.equals(this.tagFilters, jsonSearchParameters.tagFilters) &&
        Objects.equals(this.termName, jsonSearchParameters.termName) &&
        Objects.equals(this.typeName, jsonSearchParameters.typeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, classification, entityFilters, excludeDeletedEntities, includeClassificationAttributes, includeSubClassifications, includeSubTypes, limit, offset, query, sortBy, sortOrder, tagFilters, termName, typeName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonSearchParameters {\n");
    
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    entityFilters: ").append(toIndentedString(entityFilters)).append("\n");
    sb.append("    excludeDeletedEntities: ").append(toIndentedString(excludeDeletedEntities)).append("\n");
    sb.append("    includeClassificationAttributes: ").append(toIndentedString(includeClassificationAttributes)).append("\n");
    sb.append("    includeSubClassifications: ").append(toIndentedString(includeSubClassifications)).append("\n");
    sb.append("    includeSubTypes: ").append(toIndentedString(includeSubTypes)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    tagFilters: ").append(toIndentedString(tagFilters)).append("\n");
    sb.append("    termName: ").append(toIndentedString(termName)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
