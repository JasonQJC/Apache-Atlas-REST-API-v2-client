/*
 * Atlas REST API
 * Atlas exposes a variety of REST endpoints to work with types, entities, lineage and data discovery.
 *
 * OpenAPI spec version: 3.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.jasonqjc.atlas_v2_client.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * JsonAtlasGlossaryBaseObject
 */


public class JsonAtlasGlossaryBaseObject extends JsonAtlasBaseModelObject {
  @JsonProperty("additionalAttributes")
  private Map<String, Object> additionalAttributes = null;

  @JsonProperty("classifications")
  private List<JsonAtlasClassification> classifications = null;

  @JsonProperty("longDescription")
  private String longDescription = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("qualifiedName")
  private String qualifiedName = null;

  @JsonProperty("shortDescription")
  private String shortDescription = null;

  public JsonAtlasGlossaryBaseObject additionalAttributes(Map<String, Object> additionalAttributes) {
    this.additionalAttributes = additionalAttributes;
    return this;
  }

  public JsonAtlasGlossaryBaseObject putAdditionalAttributesItem(String key, Object additionalAttributesItem) {
    if (this.additionalAttributes == null) {
      this.additionalAttributes = new HashMap<String, Object>();
    }
    this.additionalAttributes.put(key, additionalAttributesItem);
    return this;
  }

   /**
   * Get additionalAttributes
   * @return additionalAttributes
  **/
  @Schema(description = "")
  public Map<String, Object> getAdditionalAttributes() {
    return additionalAttributes;
  }

  public void setAdditionalAttributes(Map<String, Object> additionalAttributes) {
    this.additionalAttributes = additionalAttributes;
  }

  public JsonAtlasGlossaryBaseObject classifications(List<JsonAtlasClassification> classifications) {
    this.classifications = classifications;
    return this;
  }

  public JsonAtlasGlossaryBaseObject addClassificationsItem(JsonAtlasClassification classificationsItem) {
    if (this.classifications == null) {
      this.classifications = new ArrayList<JsonAtlasClassification>();
    }
    this.classifications.add(classificationsItem);
    return this;
  }

   /**
   * Get classifications
   * @return classifications
  **/
  @Schema(description = "")
  public List<JsonAtlasClassification> getClassifications() {
    return classifications;
  }

  public void setClassifications(List<JsonAtlasClassification> classifications) {
    this.classifications = classifications;
  }

  public JsonAtlasGlossaryBaseObject longDescription(String longDescription) {
    this.longDescription = longDescription;
    return this;
  }

   /**
   * Get longDescription
   * @return longDescription
  **/
  @Schema(description = "")
  public String getLongDescription() {
    return longDescription;
  }

  public void setLongDescription(String longDescription) {
    this.longDescription = longDescription;
  }

  public JsonAtlasGlossaryBaseObject name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public JsonAtlasGlossaryBaseObject qualifiedName(String qualifiedName) {
    this.qualifiedName = qualifiedName;
    return this;
  }

   /**
   * Get qualifiedName
   * @return qualifiedName
  **/
  @Schema(description = "")
  public String getQualifiedName() {
    return qualifiedName;
  }

  public void setQualifiedName(String qualifiedName) {
    this.qualifiedName = qualifiedName;
  }

  public JsonAtlasGlossaryBaseObject shortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

   /**
   * Get shortDescription
   * @return shortDescription
  **/
  @Schema(description = "")
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonAtlasGlossaryBaseObject jsonAtlasGlossaryBaseObject = (JsonAtlasGlossaryBaseObject) o;
    return Objects.equals(this.additionalAttributes, jsonAtlasGlossaryBaseObject.additionalAttributes) &&
        Objects.equals(this.classifications, jsonAtlasGlossaryBaseObject.classifications) &&
        Objects.equals(this.longDescription, jsonAtlasGlossaryBaseObject.longDescription) &&
        Objects.equals(this.name, jsonAtlasGlossaryBaseObject.name) &&
        Objects.equals(this.qualifiedName, jsonAtlasGlossaryBaseObject.qualifiedName) &&
        Objects.equals(this.shortDescription, jsonAtlasGlossaryBaseObject.shortDescription) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalAttributes, classifications, longDescription, name, qualifiedName, shortDescription, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonAtlasGlossaryBaseObject {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    additionalAttributes: ").append(toIndentedString(additionalAttributes)).append("\n");
    sb.append("    classifications: ").append(toIndentedString(classifications)).append("\n");
    sb.append("    longDescription: ").append(toIndentedString(longDescription)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    qualifiedName: ").append(toIndentedString(qualifiedName)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
