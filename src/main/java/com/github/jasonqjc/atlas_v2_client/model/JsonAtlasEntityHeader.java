/*
 * Atlas REST API
 * Atlas exposes a variety of REST endpoints to work with types, entities, lineage and data discovery.
 *
 * OpenAPI spec version: 3.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.jasonqjc.atlas_v2_client.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * An instance of an entity - like hive_table, hive_database.
 */
@Schema(description = "An instance of an entity - like hive_table, hive_database.")

public class JsonAtlasEntityHeader extends JsonAtlasStruct {
  @JsonProperty("classificationNames")
  private List<String> classificationNames = null;

  @JsonProperty("classifications")
  private List<JsonAtlasClassification> classifications = null;

  @JsonProperty("displayText")
  private String displayText = null;

  @JsonProperty("guid")
  private String guid = null;

  @JsonProperty("isIncomplete")
  private Boolean isIncomplete = null;

  @JsonProperty("labels")
  private List<String> labels = null;

  @JsonProperty("meaningNames")
  private List<String> meaningNames = null;

  @JsonProperty("meanings")
  private List<JsonAtlasTermAssignmentHeader> meanings = null;

  @JsonProperty("status")
  private JsonStatus status = null;

  public JsonAtlasEntityHeader classificationNames(List<String> classificationNames) {
    this.classificationNames = classificationNames;
    return this;
  }

  public JsonAtlasEntityHeader addClassificationNamesItem(String classificationNamesItem) {
    if (this.classificationNames == null) {
      this.classificationNames = new ArrayList<String>();
    }
    this.classificationNames.add(classificationNamesItem);
    return this;
  }

   /**
   * Get classificationNames
   * @return classificationNames
  **/
  @Schema(description = "")
  public List<String> getClassificationNames() {
    return classificationNames;
  }

  public void setClassificationNames(List<String> classificationNames) {
    this.classificationNames = classificationNames;
  }

  public JsonAtlasEntityHeader classifications(List<JsonAtlasClassification> classifications) {
    this.classifications = classifications;
    return this;
  }

  public JsonAtlasEntityHeader addClassificationsItem(JsonAtlasClassification classificationsItem) {
    if (this.classifications == null) {
      this.classifications = new ArrayList<JsonAtlasClassification>();
    }
    this.classifications.add(classificationsItem);
    return this;
  }

   /**
   * Get classifications
   * @return classifications
  **/
  @Schema(description = "")
  public List<JsonAtlasClassification> getClassifications() {
    return classifications;
  }

  public void setClassifications(List<JsonAtlasClassification> classifications) {
    this.classifications = classifications;
  }

  public JsonAtlasEntityHeader displayText(String displayText) {
    this.displayText = displayText;
    return this;
  }

   /**
   * Get displayText
   * @return displayText
  **/
  @Schema(description = "")
  public String getDisplayText() {
    return displayText;
  }

  public void setDisplayText(String displayText) {
    this.displayText = displayText;
  }

  public JsonAtlasEntityHeader guid(String guid) {
    this.guid = guid;
    return this;
  }

   /**
   * Get guid
   * @return guid
  **/
  @Schema(description = "")
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }

  public JsonAtlasEntityHeader isIncomplete(Boolean isIncomplete) {
    this.isIncomplete = isIncomplete;
    return this;
  }

   /**
   * Get isIncomplete
   * @return isIncomplete
  **/
  @Schema(description = "")
  public Boolean isIsIncomplete() {
    return isIncomplete;
  }

  public void setIsIncomplete(Boolean isIncomplete) {
    this.isIncomplete = isIncomplete;
  }

  public JsonAtlasEntityHeader labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public JsonAtlasEntityHeader addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<String>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @Schema(description = "")
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }

  public JsonAtlasEntityHeader meaningNames(List<String> meaningNames) {
    this.meaningNames = meaningNames;
    return this;
  }

  public JsonAtlasEntityHeader addMeaningNamesItem(String meaningNamesItem) {
    if (this.meaningNames == null) {
      this.meaningNames = new ArrayList<String>();
    }
    this.meaningNames.add(meaningNamesItem);
    return this;
  }

   /**
   * Get meaningNames
   * @return meaningNames
  **/
  @Schema(description = "")
  public List<String> getMeaningNames() {
    return meaningNames;
  }

  public void setMeaningNames(List<String> meaningNames) {
    this.meaningNames = meaningNames;
  }

  public JsonAtlasEntityHeader meanings(List<JsonAtlasTermAssignmentHeader> meanings) {
    this.meanings = meanings;
    return this;
  }

  public JsonAtlasEntityHeader addMeaningsItem(JsonAtlasTermAssignmentHeader meaningsItem) {
    if (this.meanings == null) {
      this.meanings = new ArrayList<JsonAtlasTermAssignmentHeader>();
    }
    this.meanings.add(meaningsItem);
    return this;
  }

   /**
   * Get meanings
   * @return meanings
  **/
  @Schema(description = "")
  public List<JsonAtlasTermAssignmentHeader> getMeanings() {
    return meanings;
  }

  public void setMeanings(List<JsonAtlasTermAssignmentHeader> meanings) {
    this.meanings = meanings;
  }

  public JsonAtlasEntityHeader status(JsonStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public JsonStatus getStatus() {
    return status;
  }

  public void setStatus(JsonStatus status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonAtlasEntityHeader jsonAtlasEntityHeader = (JsonAtlasEntityHeader) o;
    return Objects.equals(this.classificationNames, jsonAtlasEntityHeader.classificationNames) &&
        Objects.equals(this.classifications, jsonAtlasEntityHeader.classifications) &&
        Objects.equals(this.displayText, jsonAtlasEntityHeader.displayText) &&
        Objects.equals(this.guid, jsonAtlasEntityHeader.guid) &&
        Objects.equals(this.isIncomplete, jsonAtlasEntityHeader.isIncomplete) &&
        Objects.equals(this.labels, jsonAtlasEntityHeader.labels) &&
        Objects.equals(this.meaningNames, jsonAtlasEntityHeader.meaningNames) &&
        Objects.equals(this.meanings, jsonAtlasEntityHeader.meanings) &&
        Objects.equals(this.status, jsonAtlasEntityHeader.status) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classificationNames, classifications, displayText, guid, isIncomplete, labels, meaningNames, meanings, status, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonAtlasEntityHeader {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    classificationNames: ").append(toIndentedString(classificationNames)).append("\n");
    sb.append("    classifications: ").append(toIndentedString(classifications)).append("\n");
    sb.append("    displayText: ").append(toIndentedString(displayText)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    isIncomplete: ").append(toIndentedString(isIncomplete)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    meaningNames: ").append(toIndentedString(meaningNames)).append("\n");
    sb.append("    meanings: ").append(toIndentedString(meanings)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
