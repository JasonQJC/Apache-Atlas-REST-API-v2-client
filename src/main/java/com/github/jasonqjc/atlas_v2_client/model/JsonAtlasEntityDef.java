/*
 * Atlas REST API
 * Atlas exposes a variety of REST endpoints to work with types, entities, lineage and data discovery.
 *
 * OpenAPI spec version: 3.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.jasonqjc.atlas_v2_client.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * class that captures details of a entity-type.
 */
@Schema(description = "class that captures details of a entity-type.")

public class JsonAtlasEntityDef extends JsonAtlasStructDef {
  @JsonProperty("businessAttributeDefs")
  private Map<String, List<JsonAtlasAttributeDef>> businessAttributeDefs = null;

  @JsonProperty("relationshipAttributeDefs")
  private List<JsonAtlasRelationshipAttributeDef> relationshipAttributeDefs = null;

  @JsonProperty("subTypes")
  private List<String> subTypes = null;

  @JsonProperty("superTypes")
  private List<String> superTypes = null;

  public JsonAtlasEntityDef businessAttributeDefs(Map<String, List<JsonAtlasAttributeDef>> businessAttributeDefs) {
    this.businessAttributeDefs = businessAttributeDefs;
    return this;
  }

  public JsonAtlasEntityDef putBusinessAttributeDefsItem(String key, List<JsonAtlasAttributeDef> businessAttributeDefsItem) {
    if (this.businessAttributeDefs == null) {
      this.businessAttributeDefs = new HashMap<String, List<JsonAtlasAttributeDef>>();
    }
    this.businessAttributeDefs.put(key, businessAttributeDefsItem);
    return this;
  }

   /**
   * Get businessAttributeDefs
   * @return businessAttributeDefs
  **/
  @Schema(description = "")
  public Map<String, List<JsonAtlasAttributeDef>> getBusinessAttributeDefs() {
    return businessAttributeDefs;
  }

  public void setBusinessAttributeDefs(Map<String, List<JsonAtlasAttributeDef>> businessAttributeDefs) {
    this.businessAttributeDefs = businessAttributeDefs;
  }

  public JsonAtlasEntityDef relationshipAttributeDefs(List<JsonAtlasRelationshipAttributeDef> relationshipAttributeDefs) {
    this.relationshipAttributeDefs = relationshipAttributeDefs;
    return this;
  }

  public JsonAtlasEntityDef addRelationshipAttributeDefsItem(JsonAtlasRelationshipAttributeDef relationshipAttributeDefsItem) {
    if (this.relationshipAttributeDefs == null) {
      this.relationshipAttributeDefs = new ArrayList<JsonAtlasRelationshipAttributeDef>();
    }
    this.relationshipAttributeDefs.add(relationshipAttributeDefsItem);
    return this;
  }

   /**
   * Get relationshipAttributeDefs
   * @return relationshipAttributeDefs
  **/
  @Schema(description = "")
  public List<JsonAtlasRelationshipAttributeDef> getRelationshipAttributeDefs() {
    return relationshipAttributeDefs;
  }

  public void setRelationshipAttributeDefs(List<JsonAtlasRelationshipAttributeDef> relationshipAttributeDefs) {
    this.relationshipAttributeDefs = relationshipAttributeDefs;
  }

  public JsonAtlasEntityDef subTypes(List<String> subTypes) {
    this.subTypes = subTypes;
    return this;
  }

  public JsonAtlasEntityDef addSubTypesItem(String subTypesItem) {
    if (this.subTypes == null) {
      this.subTypes = new ArrayList<String>();
    }
    this.subTypes.add(subTypesItem);
    return this;
  }

   /**
   * Get subTypes
   * @return subTypes
  **/
  @Schema(description = "")
  public List<String> getSubTypes() {
    return subTypes;
  }

  public void setSubTypes(List<String> subTypes) {
    this.subTypes = subTypes;
  }

  public JsonAtlasEntityDef superTypes(List<String> superTypes) {
    this.superTypes = superTypes;
    return this;
  }

  public JsonAtlasEntityDef addSuperTypesItem(String superTypesItem) {
    if (this.superTypes == null) {
      this.superTypes = new ArrayList<String>();
    }
    this.superTypes.add(superTypesItem);
    return this;
  }

   /**
   * Get superTypes
   * @return superTypes
  **/
  @Schema(description = "")
  public List<String> getSuperTypes() {
    return superTypes;
  }

  public void setSuperTypes(List<String> superTypes) {
    this.superTypes = superTypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonAtlasEntityDef jsonAtlasEntityDef = (JsonAtlasEntityDef) o;
    return Objects.equals(this.businessAttributeDefs, jsonAtlasEntityDef.businessAttributeDefs) &&
        Objects.equals(this.relationshipAttributeDefs, jsonAtlasEntityDef.relationshipAttributeDefs) &&
        Objects.equals(this.subTypes, jsonAtlasEntityDef.subTypes) &&
        Objects.equals(this.superTypes, jsonAtlasEntityDef.superTypes) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessAttributeDefs, relationshipAttributeDefs, subTypes, superTypes, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonAtlasEntityDef {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    businessAttributeDefs: ").append(toIndentedString(businessAttributeDefs)).append("\n");
    sb.append("    relationshipAttributeDefs: ").append(toIndentedString(relationshipAttributeDefs)).append("\n");
    sb.append("    subTypes: ").append(toIndentedString(subTypes)).append("\n");
    sb.append("    superTypes: ").append(toIndentedString(superTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
