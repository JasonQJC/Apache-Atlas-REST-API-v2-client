/*
 * Atlas REST API
 * Atlas exposes a variety of REST endpoints to work with types, entities, lineage and data discovery.
 *
 * OpenAPI spec version: 3.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.jasonqjc.atlas_v2_client.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * class that captures details of a classification-type.
 */
@Schema(description = "class that captures details of a classification-type.")

public class JsonAtlasClassificationDef extends JsonAtlasStructDef {
  @JsonProperty("entityTypes")
  private List<String> entityTypes = null;

  @JsonProperty("subTypes")
  private List<String> subTypes = null;

  @JsonProperty("superTypes")
  private List<String> superTypes = null;

  public JsonAtlasClassificationDef entityTypes(List<String> entityTypes) {
    this.entityTypes = entityTypes;
    return this;
  }

  public JsonAtlasClassificationDef addEntityTypesItem(String entityTypesItem) {
    if (this.entityTypes == null) {
      this.entityTypes = new ArrayList<String>();
    }
    this.entityTypes.add(entityTypesItem);
    return this;
  }

   /**
   * Specifying a list of entityType names in the classificationDef, ensures that classifications can only be applied to those entityTypes. &lt;ul&gt; &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt; &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt; &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt; &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt; &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt; &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt; &lt;/ul&gt;
   * @return entityTypes
  **/
  @Schema(description = "Specifying a list of entityType names in the classificationDef, ensures that classifications can only be applied to those entityTypes. <ul> <li>Any subtypes of the entity types inherit the restriction</li> <li>Any classificationDef subtypes inherit the parents entityTypes restrictions</li> <li>Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes</li> <li>An empty entityTypes list when there are no parent restrictions means there are no restrictions</li> <li>An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions</li> <li>If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs</li> </ul>")
  public List<String> getEntityTypes() {
    return entityTypes;
  }

  public void setEntityTypes(List<String> entityTypes) {
    this.entityTypes = entityTypes;
  }

  public JsonAtlasClassificationDef subTypes(List<String> subTypes) {
    this.subTypes = subTypes;
    return this;
  }

  public JsonAtlasClassificationDef addSubTypesItem(String subTypesItem) {
    if (this.subTypes == null) {
      this.subTypes = new ArrayList<String>();
    }
    this.subTypes.add(subTypesItem);
    return this;
  }

   /**
   * Get subTypes
   * @return subTypes
  **/
  @Schema(description = "")
  public List<String> getSubTypes() {
    return subTypes;
  }

  public void setSubTypes(List<String> subTypes) {
    this.subTypes = subTypes;
  }

  public JsonAtlasClassificationDef superTypes(List<String> superTypes) {
    this.superTypes = superTypes;
    return this;
  }

  public JsonAtlasClassificationDef addSuperTypesItem(String superTypesItem) {
    if (this.superTypes == null) {
      this.superTypes = new ArrayList<String>();
    }
    this.superTypes.add(superTypesItem);
    return this;
  }

   /**
   * Get superTypes
   * @return superTypes
  **/
  @Schema(description = "")
  public List<String> getSuperTypes() {
    return superTypes;
  }

  public void setSuperTypes(List<String> superTypes) {
    this.superTypes = superTypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonAtlasClassificationDef jsonAtlasClassificationDef = (JsonAtlasClassificationDef) o;
    return Objects.equals(this.entityTypes, jsonAtlasClassificationDef.entityTypes) &&
        Objects.equals(this.subTypes, jsonAtlasClassificationDef.subTypes) &&
        Objects.equals(this.superTypes, jsonAtlasClassificationDef.superTypes) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityTypes, subTypes, superTypes, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonAtlasClassificationDef {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    entityTypes: ").append(toIndentedString(entityTypes)).append("\n");
    sb.append("    subTypes: ").append(toIndentedString(subTypes)).append("\n");
    sb.append("    superTypes: ").append(toIndentedString(superTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
