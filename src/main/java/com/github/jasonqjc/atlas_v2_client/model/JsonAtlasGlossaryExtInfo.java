/*
 * Atlas REST API
 * Atlas exposes a variety of REST endpoints to work with types, entities, lineage and data discovery.
 *
 * OpenAPI spec version: 3.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.jasonqjc.atlas_v2_client.model;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * JsonAtlasGlossaryExtInfo
 */


public class JsonAtlasGlossaryExtInfo extends JsonAtlasGlossary {
  @JsonProperty("categoryInfo")
  private Map<String, JsonAtlasGlossaryCategory> categoryInfo = null;

  @JsonProperty("termInfo")
  private Map<String, JsonAtlasGlossaryTerm> termInfo = null;

  public JsonAtlasGlossaryExtInfo categoryInfo(Map<String, JsonAtlasGlossaryCategory> categoryInfo) {
    this.categoryInfo = categoryInfo;
    return this;
  }

  public JsonAtlasGlossaryExtInfo putCategoryInfoItem(String key, JsonAtlasGlossaryCategory categoryInfoItem) {
    if (this.categoryInfo == null) {
      this.categoryInfo = new HashMap<String, JsonAtlasGlossaryCategory>();
    }
    this.categoryInfo.put(key, categoryInfoItem);
    return this;
  }

   /**
   * Get categoryInfo
   * @return categoryInfo
  **/
  @Schema(description = "")
  public Map<String, JsonAtlasGlossaryCategory> getCategoryInfo() {
    return categoryInfo;
  }

  public void setCategoryInfo(Map<String, JsonAtlasGlossaryCategory> categoryInfo) {
    this.categoryInfo = categoryInfo;
  }

  public JsonAtlasGlossaryExtInfo termInfo(Map<String, JsonAtlasGlossaryTerm> termInfo) {
    this.termInfo = termInfo;
    return this;
  }

  public JsonAtlasGlossaryExtInfo putTermInfoItem(String key, JsonAtlasGlossaryTerm termInfoItem) {
    if (this.termInfo == null) {
      this.termInfo = new HashMap<String, JsonAtlasGlossaryTerm>();
    }
    this.termInfo.put(key, termInfoItem);
    return this;
  }

   /**
   * Get termInfo
   * @return termInfo
  **/
  @Schema(description = "")
  public Map<String, JsonAtlasGlossaryTerm> getTermInfo() {
    return termInfo;
  }

  public void setTermInfo(Map<String, JsonAtlasGlossaryTerm> termInfo) {
    this.termInfo = termInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonAtlasGlossaryExtInfo jsonAtlasGlossaryExtInfo = (JsonAtlasGlossaryExtInfo) o;
    return Objects.equals(this.categoryInfo, jsonAtlasGlossaryExtInfo.categoryInfo) &&
        Objects.equals(this.termInfo, jsonAtlasGlossaryExtInfo.termInfo) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryInfo, termInfo, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonAtlasGlossaryExtInfo {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    categoryInfo: ").append(toIndentedString(categoryInfo)).append("\n");
    sb.append("    termInfo: ").append(toIndentedString(termInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
