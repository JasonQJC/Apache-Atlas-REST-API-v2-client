/*
 * Atlas REST API
 * Atlas exposes a variety of REST endpoints to work with types, entities, lineage and data discovery.
 *
 * OpenAPI spec version: 3.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.jasonqjc.atlas_v2_client.model;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Base class that captures common-attributes for all Atlas types.
 * 
 * 捕获所有Atlas类型的公共属性的基类。
 */
@Schema(description = "Base class that captures common-attributes for all Atlas types.")

public class JsonAtlasBaseTypeDef {
  @JsonProperty("category")
  private JsonTypeCategory category = null;

  @JsonProperty("createTime")
  private BigDecimal createTime = null;

  @JsonProperty("createdBy")
  private String createdBy = null;

  @JsonProperty("dateFormatter")
  private JsonDateFormat dateFormatter = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("guid")
  private String guid = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("options")
  private Map<String, String> options = null;

  @JsonProperty("serviceType")
  private String serviceType = null;

  @JsonProperty("typeVersion")
  private String typeVersion = null;

  @JsonProperty("updateTime")
  private BigDecimal updateTime = null;

  @JsonProperty("updatedBy")
  private String updatedBy = null;

  @JsonProperty("version")
  private BigDecimal version = null;

  public JsonAtlasBaseTypeDef category(JsonTypeCategory category) {
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @Schema(description = "")
  public JsonTypeCategory getCategory() {
    return category;
  }

  public void setCategory(JsonTypeCategory category) {
    this.category = category;
  }

  public JsonAtlasBaseTypeDef createTime(BigDecimal createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * Get createTime
   * @return createTime
  **/
  @Schema(description = "")
  public BigDecimal getCreateTime() {
    return createTime;
  }

  public void setCreateTime(BigDecimal createTime) {
    this.createTime = createTime;
  }

  public JsonAtlasBaseTypeDef createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @Schema(description = "")
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }

  public JsonAtlasBaseTypeDef dateFormatter(JsonDateFormat dateFormatter) {
    this.dateFormatter = dateFormatter;
    return this;
  }

   /**
   * Get dateFormatter
   * @return dateFormatter
  **/
  @Schema(description = "")
  public JsonDateFormat getDateFormatter() {
    return dateFormatter;
  }

  public void setDateFormatter(JsonDateFormat dateFormatter) {
    this.dateFormatter = dateFormatter;
  }

  public JsonAtlasBaseTypeDef description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public JsonAtlasBaseTypeDef guid(String guid) {
    this.guid = guid;
    return this;
  }

   /**
   * Get guid
   * @return guid
  **/
  @Schema(description = "")
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }

  public JsonAtlasBaseTypeDef name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public JsonAtlasBaseTypeDef options(Map<String, String> options) {
    this.options = options;
    return this;
  }

  public JsonAtlasBaseTypeDef putOptionsItem(String key, String optionsItem) {
    if (this.options == null) {
      this.options = new HashMap<String, String>();
    }
    this.options.put(key, optionsItem);
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public Map<String, String> getOptions() {
    return options;
  }

  public void setOptions(Map<String, String> options) {
    this.options = options;
  }

  public JsonAtlasBaseTypeDef serviceType(String serviceType) {
    this.serviceType = serviceType;
    return this;
  }

   /**
   * Get serviceType
   * @return serviceType
  **/
  @Schema(description = "")
  public String getServiceType() {
    return serviceType;
  }

  public void setServiceType(String serviceType) {
    this.serviceType = serviceType;
  }

  public JsonAtlasBaseTypeDef typeVersion(String typeVersion) {
    this.typeVersion = typeVersion;
    return this;
  }

   /**
   * Get typeVersion
   * @return typeVersion
  **/
  @Schema(description = "")
  public String getTypeVersion() {
    return typeVersion;
  }

  public void setTypeVersion(String typeVersion) {
    this.typeVersion = typeVersion;
  }

  public JsonAtlasBaseTypeDef updateTime(BigDecimal updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(description = "")
  public BigDecimal getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(BigDecimal updateTime) {
    this.updateTime = updateTime;
  }

  public JsonAtlasBaseTypeDef updatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

   /**
   * Get updatedBy
   * @return updatedBy
  **/
  @Schema(description = "")
  public String getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
  }

  public JsonAtlasBaseTypeDef version(BigDecimal version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public BigDecimal getVersion() {
    return version;
  }

  public void setVersion(BigDecimal version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonAtlasBaseTypeDef jsonAtlasBaseTypeDef = (JsonAtlasBaseTypeDef) o;
    return Objects.equals(this.category, jsonAtlasBaseTypeDef.category) &&
        Objects.equals(this.createTime, jsonAtlasBaseTypeDef.createTime) &&
        Objects.equals(this.createdBy, jsonAtlasBaseTypeDef.createdBy) &&
        Objects.equals(this.dateFormatter, jsonAtlasBaseTypeDef.dateFormatter) &&
        Objects.equals(this.description, jsonAtlasBaseTypeDef.description) &&
        Objects.equals(this.guid, jsonAtlasBaseTypeDef.guid) &&
        Objects.equals(this.name, jsonAtlasBaseTypeDef.name) &&
        Objects.equals(this.options, jsonAtlasBaseTypeDef.options) &&
        Objects.equals(this.serviceType, jsonAtlasBaseTypeDef.serviceType) &&
        Objects.equals(this.typeVersion, jsonAtlasBaseTypeDef.typeVersion) &&
        Objects.equals(this.updateTime, jsonAtlasBaseTypeDef.updateTime) &&
        Objects.equals(this.updatedBy, jsonAtlasBaseTypeDef.updatedBy) &&
        Objects.equals(this.version, jsonAtlasBaseTypeDef.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, createTime, createdBy, dateFormatter, description, guid, name, options, serviceType, typeVersion, updateTime, updatedBy, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonAtlasBaseTypeDef {\n");
    
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    dateFormatter: ").append(toIndentedString(dateFormatter)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    typeVersion: ").append(toIndentedString(typeVersion)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
