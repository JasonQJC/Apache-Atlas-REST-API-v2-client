/*
 * Atlas REST API
 * Atlas exposes a variety of REST endpoints to work with types, entities, lineage and data discovery.
 *
 * OpenAPI spec version: 3.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.jasonqjc.atlas_v2_client.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * class that captures details of a struct-attribute.
 */
@Schema(description = "class that captures details of a struct-attribute.")

public class JsonAtlasAttributeDef {
  @JsonProperty("cardinality")
  private JsonCardinality cardinality = null;

  @JsonProperty("constraints")
  private List<JsonAtlasConstraintDef> constraints = null;

  @JsonProperty("defaultValue")
  private String defaultValue = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("displayName")
  private String displayName = null;

  @JsonProperty("includeInNotification")
  private Boolean includeInNotification = null;

  @JsonProperty("indexType")
  private JsonIndexType indexType = null;

  @JsonProperty("isIndexable")
  private Boolean isIndexable = null;

  @JsonProperty("isOptional")
  private Boolean isOptional = null;

  @JsonProperty("isUnique")
  private Boolean isUnique = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("options")
  private Map<String, String> options = null;

  @JsonProperty("searchWeight")
  private Integer searchWeight = null;

  @JsonProperty("typeName")
  private String typeName = null;

  @JsonProperty("valuesMaxCount")
  private Integer valuesMaxCount = null;

  @JsonProperty("valuesMinCount")
  private Integer valuesMinCount = null;

  public JsonAtlasAttributeDef cardinality(JsonCardinality cardinality) {
    this.cardinality = cardinality;
    return this;
  }

   /**
   * Get cardinality
   * @return cardinality
  **/
  @Schema(description = "")
  public JsonCardinality getCardinality() {
    return cardinality;
  }

  public void setCardinality(JsonCardinality cardinality) {
    this.cardinality = cardinality;
  }

  public JsonAtlasAttributeDef constraints(List<JsonAtlasConstraintDef> constraints) {
    this.constraints = constraints;
    return this;
  }

  public JsonAtlasAttributeDef addConstraintsItem(JsonAtlasConstraintDef constraintsItem) {
    if (this.constraints == null) {
      this.constraints = new ArrayList<JsonAtlasConstraintDef>();
    }
    this.constraints.add(constraintsItem);
    return this;
  }

   /**
   * Get constraints
   * @return constraints
  **/
  @Schema(description = "")
  public List<JsonAtlasConstraintDef> getConstraints() {
    return constraints;
  }

  public void setConstraints(List<JsonAtlasConstraintDef> constraints) {
    this.constraints = constraints;
  }

  public JsonAtlasAttributeDef defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * Get defaultValue
   * @return defaultValue
  **/
  @Schema(description = "")
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }

  public JsonAtlasAttributeDef description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public JsonAtlasAttributeDef displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @Schema(description = "")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public JsonAtlasAttributeDef includeInNotification(Boolean includeInNotification) {
    this.includeInNotification = includeInNotification;
    return this;
  }

   /**
   * Get includeInNotification
   * @return includeInNotification
  **/
  @Schema(description = "")
  public Boolean isIncludeInNotification() {
    return includeInNotification;
  }

  public void setIncludeInNotification(Boolean includeInNotification) {
    this.includeInNotification = includeInNotification;
  }

  public JsonAtlasAttributeDef indexType(JsonIndexType indexType) {
    this.indexType = indexType;
    return this;
  }

   /**
   * Get indexType
   * @return indexType
  **/
  @Schema(description = "")
  public JsonIndexType getIndexType() {
    return indexType;
  }

  public void setIndexType(JsonIndexType indexType) {
    this.indexType = indexType;
  }

  public JsonAtlasAttributeDef isIndexable(Boolean isIndexable) {
    this.isIndexable = isIndexable;
    return this;
  }

   /**
   * Get isIndexable
   * @return isIndexable
  **/
  @Schema(description = "")
  public Boolean isIsIndexable() {
    return isIndexable;
  }

  public void setIsIndexable(Boolean isIndexable) {
    this.isIndexable = isIndexable;
  }

  public JsonAtlasAttributeDef isOptional(Boolean isOptional) {
    this.isOptional = isOptional;
    return this;
  }

   /**
   * Get isOptional
   * @return isOptional
  **/
  @Schema(description = "")
  public Boolean isIsOptional() {
    return isOptional;
  }

  public void setIsOptional(Boolean isOptional) {
    this.isOptional = isOptional;
  }

  public JsonAtlasAttributeDef isUnique(Boolean isUnique) {
    this.isUnique = isUnique;
    return this;
  }

   /**
   * Get isUnique
   * @return isUnique
  **/
  @Schema(description = "")
  public Boolean isIsUnique() {
    return isUnique;
  }

  public void setIsUnique(Boolean isUnique) {
    this.isUnique = isUnique;
  }

  public JsonAtlasAttributeDef name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public JsonAtlasAttributeDef options(Map<String, String> options) {
    this.options = options;
    return this;
  }

  public JsonAtlasAttributeDef putOptionsItem(String key, String optionsItem) {
    if (this.options == null) {
      this.options = new HashMap<String, String>();
    }
    this.options.put(key, optionsItem);
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public Map<String, String> getOptions() {
    return options;
  }

  public void setOptions(Map<String, String> options) {
    this.options = options;
  }

  public JsonAtlasAttributeDef searchWeight(Integer searchWeight) {
    this.searchWeight = searchWeight;
    return this;
  }

   /**
   * Get searchWeight
   * @return searchWeight
  **/
  @Schema(description = "")
  public Integer getSearchWeight() {
    return searchWeight;
  }

  public void setSearchWeight(Integer searchWeight) {
    this.searchWeight = searchWeight;
  }

  public JsonAtlasAttributeDef typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

   /**
   * Get typeName
   * @return typeName
  **/
  @Schema(description = "")
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }

  public JsonAtlasAttributeDef valuesMaxCount(Integer valuesMaxCount) {
    this.valuesMaxCount = valuesMaxCount;
    return this;
  }

   /**
   * Get valuesMaxCount
   * @return valuesMaxCount
  **/
  @Schema(description = "")
  public Integer getValuesMaxCount() {
    return valuesMaxCount;
  }

  public void setValuesMaxCount(Integer valuesMaxCount) {
    this.valuesMaxCount = valuesMaxCount;
  }

  public JsonAtlasAttributeDef valuesMinCount(Integer valuesMinCount) {
    this.valuesMinCount = valuesMinCount;
    return this;
  }

   /**
   * Get valuesMinCount
   * @return valuesMinCount
  **/
  @Schema(description = "")
  public Integer getValuesMinCount() {
    return valuesMinCount;
  }

  public void setValuesMinCount(Integer valuesMinCount) {
    this.valuesMinCount = valuesMinCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonAtlasAttributeDef jsonAtlasAttributeDef = (JsonAtlasAttributeDef) o;
    return Objects.equals(this.cardinality, jsonAtlasAttributeDef.cardinality) &&
        Objects.equals(this.constraints, jsonAtlasAttributeDef.constraints) &&
        Objects.equals(this.defaultValue, jsonAtlasAttributeDef.defaultValue) &&
        Objects.equals(this.description, jsonAtlasAttributeDef.description) &&
        Objects.equals(this.displayName, jsonAtlasAttributeDef.displayName) &&
        Objects.equals(this.includeInNotification, jsonAtlasAttributeDef.includeInNotification) &&
        Objects.equals(this.indexType, jsonAtlasAttributeDef.indexType) &&
        Objects.equals(this.isIndexable, jsonAtlasAttributeDef.isIndexable) &&
        Objects.equals(this.isOptional, jsonAtlasAttributeDef.isOptional) &&
        Objects.equals(this.isUnique, jsonAtlasAttributeDef.isUnique) &&
        Objects.equals(this.name, jsonAtlasAttributeDef.name) &&
        Objects.equals(this.options, jsonAtlasAttributeDef.options) &&
        Objects.equals(this.searchWeight, jsonAtlasAttributeDef.searchWeight) &&
        Objects.equals(this.typeName, jsonAtlasAttributeDef.typeName) &&
        Objects.equals(this.valuesMaxCount, jsonAtlasAttributeDef.valuesMaxCount) &&
        Objects.equals(this.valuesMinCount, jsonAtlasAttributeDef.valuesMinCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardinality, constraints, defaultValue, description, displayName, includeInNotification, indexType, isIndexable, isOptional, isUnique, name, options, searchWeight, typeName, valuesMaxCount, valuesMinCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonAtlasAttributeDef {\n");
    
    sb.append("    cardinality: ").append(toIndentedString(cardinality)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    includeInNotification: ").append(toIndentedString(includeInNotification)).append("\n");
    sb.append("    indexType: ").append(toIndentedString(indexType)).append("\n");
    sb.append("    isIndexable: ").append(toIndentedString(isIndexable)).append("\n");
    sb.append("    isOptional: ").append(toIndentedString(isOptional)).append("\n");
    sb.append("    isUnique: ").append(toIndentedString(isUnique)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    searchWeight: ").append(toIndentedString(searchWeight)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    valuesMaxCount: ").append(toIndentedString(valuesMaxCount)).append("\n");
    sb.append("    valuesMinCount: ").append(toIndentedString(valuesMinCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
