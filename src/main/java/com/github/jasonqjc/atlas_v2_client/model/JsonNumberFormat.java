/*
 * Atlas REST API
 * Atlas exposes a variety of REST endpoints to work with types, entities, lineage and data discovery.
 *
 * OpenAPI spec version: 3.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.jasonqjc.atlas_v2_client.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * JsonNumberFormat
 */


public class JsonNumberFormat extends JsonFormat {
  @JsonProperty("availableLocales")
  private List<String> availableLocales = null;

  @JsonProperty("currency")
  private String currency = null;

  @JsonProperty("currencyInstance")
  private JsonNumberFormat currencyInstance = null;

  @JsonProperty("groupingUsed")
  private Boolean groupingUsed = null;

  @JsonProperty("instance")
  private JsonNumberFormat instance = null;

  @JsonProperty("integerInstance")
  private JsonNumberFormat integerInstance = null;

  @JsonProperty("maximumFractionDigits")
  private Integer maximumFractionDigits = null;

  @JsonProperty("maximumIntegerDigits")
  private Integer maximumIntegerDigits = null;

  @JsonProperty("minimumFractionDigits")
  private Integer minimumFractionDigits = null;

  @JsonProperty("minimumIntegerDigits")
  private Integer minimumIntegerDigits = null;

  @JsonProperty("numberInstance")
  private JsonNumberFormat numberInstance = null;

  @JsonProperty("parseIntegerOnly")
  private Boolean parseIntegerOnly = null;

  @JsonProperty("percentInstance")
  private JsonNumberFormat percentInstance = null;

  @JsonProperty("roundingMode")
  private JsonRoundingMode roundingMode = null;

  public JsonNumberFormat availableLocales(List<String> availableLocales) {
    this.availableLocales = availableLocales;
    return this;
  }

  public JsonNumberFormat addAvailableLocalesItem(String availableLocalesItem) {
    if (this.availableLocales == null) {
      this.availableLocales = new ArrayList<String>();
    }
    this.availableLocales.add(availableLocalesItem);
    return this;
  }

   /**
   * Get availableLocales
   * @return availableLocales
  **/
  @Schema(description = "")
  public List<String> getAvailableLocales() {
    return availableLocales;
  }

  public void setAvailableLocales(List<String> availableLocales) {
    this.availableLocales = availableLocales;
  }

  public JsonNumberFormat currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @Schema(description = "")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public JsonNumberFormat currencyInstance(JsonNumberFormat currencyInstance) {
    this.currencyInstance = currencyInstance;
    return this;
  }

   /**
   * Get currencyInstance
   * @return currencyInstance
  **/
  @Schema(description = "")
  public JsonNumberFormat getCurrencyInstance() {
    return currencyInstance;
  }

  public void setCurrencyInstance(JsonNumberFormat currencyInstance) {
    this.currencyInstance = currencyInstance;
  }

  public JsonNumberFormat groupingUsed(Boolean groupingUsed) {
    this.groupingUsed = groupingUsed;
    return this;
  }

   /**
   * Get groupingUsed
   * @return groupingUsed
  **/
  @Schema(description = "")
  public Boolean isGroupingUsed() {
    return groupingUsed;
  }

  public void setGroupingUsed(Boolean groupingUsed) {
    this.groupingUsed = groupingUsed;
  }

  public JsonNumberFormat instance(JsonNumberFormat instance) {
    this.instance = instance;
    return this;
  }

   /**
   * Get instance
   * @return instance
  **/
  @Schema(description = "")
  public JsonNumberFormat getInstance() {
    return instance;
  }

  public void setInstance(JsonNumberFormat instance) {
    this.instance = instance;
  }

  public JsonNumberFormat integerInstance(JsonNumberFormat integerInstance) {
    this.integerInstance = integerInstance;
    return this;
  }

   /**
   * Get integerInstance
   * @return integerInstance
  **/
  @Schema(description = "")
  public JsonNumberFormat getIntegerInstance() {
    return integerInstance;
  }

  public void setIntegerInstance(JsonNumberFormat integerInstance) {
    this.integerInstance = integerInstance;
  }

  public JsonNumberFormat maximumFractionDigits(Integer maximumFractionDigits) {
    this.maximumFractionDigits = maximumFractionDigits;
    return this;
  }

   /**
   * Get maximumFractionDigits
   * @return maximumFractionDigits
  **/
  @Schema(description = "")
  public Integer getMaximumFractionDigits() {
    return maximumFractionDigits;
  }

  public void setMaximumFractionDigits(Integer maximumFractionDigits) {
    this.maximumFractionDigits = maximumFractionDigits;
  }

  public JsonNumberFormat maximumIntegerDigits(Integer maximumIntegerDigits) {
    this.maximumIntegerDigits = maximumIntegerDigits;
    return this;
  }

   /**
   * Get maximumIntegerDigits
   * @return maximumIntegerDigits
  **/
  @Schema(description = "")
  public Integer getMaximumIntegerDigits() {
    return maximumIntegerDigits;
  }

  public void setMaximumIntegerDigits(Integer maximumIntegerDigits) {
    this.maximumIntegerDigits = maximumIntegerDigits;
  }

  public JsonNumberFormat minimumFractionDigits(Integer minimumFractionDigits) {
    this.minimumFractionDigits = minimumFractionDigits;
    return this;
  }

   /**
   * Get minimumFractionDigits
   * @return minimumFractionDigits
  **/
  @Schema(description = "")
  public Integer getMinimumFractionDigits() {
    return minimumFractionDigits;
  }

  public void setMinimumFractionDigits(Integer minimumFractionDigits) {
    this.minimumFractionDigits = minimumFractionDigits;
  }

  public JsonNumberFormat minimumIntegerDigits(Integer minimumIntegerDigits) {
    this.minimumIntegerDigits = minimumIntegerDigits;
    return this;
  }

   /**
   * Get minimumIntegerDigits
   * @return minimumIntegerDigits
  **/
  @Schema(description = "")
  public Integer getMinimumIntegerDigits() {
    return minimumIntegerDigits;
  }

  public void setMinimumIntegerDigits(Integer minimumIntegerDigits) {
    this.minimumIntegerDigits = minimumIntegerDigits;
  }

  public JsonNumberFormat numberInstance(JsonNumberFormat numberInstance) {
    this.numberInstance = numberInstance;
    return this;
  }

   /**
   * Get numberInstance
   * @return numberInstance
  **/
  @Schema(description = "")
  public JsonNumberFormat getNumberInstance() {
    return numberInstance;
  }

  public void setNumberInstance(JsonNumberFormat numberInstance) {
    this.numberInstance = numberInstance;
  }

  public JsonNumberFormat parseIntegerOnly(Boolean parseIntegerOnly) {
    this.parseIntegerOnly = parseIntegerOnly;
    return this;
  }

   /**
   * Get parseIntegerOnly
   * @return parseIntegerOnly
  **/
  @Schema(description = "")
  public Boolean isParseIntegerOnly() {
    return parseIntegerOnly;
  }

  public void setParseIntegerOnly(Boolean parseIntegerOnly) {
    this.parseIntegerOnly = parseIntegerOnly;
  }

  public JsonNumberFormat percentInstance(JsonNumberFormat percentInstance) {
    this.percentInstance = percentInstance;
    return this;
  }

   /**
   * Get percentInstance
   * @return percentInstance
  **/
  @Schema(description = "")
  public JsonNumberFormat getPercentInstance() {
    return percentInstance;
  }

  public void setPercentInstance(JsonNumberFormat percentInstance) {
    this.percentInstance = percentInstance;
  }

  public JsonNumberFormat roundingMode(JsonRoundingMode roundingMode) {
    this.roundingMode = roundingMode;
    return this;
  }

   /**
   * Get roundingMode
   * @return roundingMode
  **/
  @Schema(description = "")
  public JsonRoundingMode getRoundingMode() {
    return roundingMode;
  }

  public void setRoundingMode(JsonRoundingMode roundingMode) {
    this.roundingMode = roundingMode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonNumberFormat jsonNumberFormat = (JsonNumberFormat) o;
    return Objects.equals(this.availableLocales, jsonNumberFormat.availableLocales) &&
        Objects.equals(this.currency, jsonNumberFormat.currency) &&
        Objects.equals(this.currencyInstance, jsonNumberFormat.currencyInstance) &&
        Objects.equals(this.groupingUsed, jsonNumberFormat.groupingUsed) &&
        Objects.equals(this.instance, jsonNumberFormat.instance) &&
        Objects.equals(this.integerInstance, jsonNumberFormat.integerInstance) &&
        Objects.equals(this.maximumFractionDigits, jsonNumberFormat.maximumFractionDigits) &&
        Objects.equals(this.maximumIntegerDigits, jsonNumberFormat.maximumIntegerDigits) &&
        Objects.equals(this.minimumFractionDigits, jsonNumberFormat.minimumFractionDigits) &&
        Objects.equals(this.minimumIntegerDigits, jsonNumberFormat.minimumIntegerDigits) &&
        Objects.equals(this.numberInstance, jsonNumberFormat.numberInstance) &&
        Objects.equals(this.parseIntegerOnly, jsonNumberFormat.parseIntegerOnly) &&
        Objects.equals(this.percentInstance, jsonNumberFormat.percentInstance) &&
        Objects.equals(this.roundingMode, jsonNumberFormat.roundingMode) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableLocales, currency, currencyInstance, groupingUsed, instance, integerInstance, maximumFractionDigits, maximumIntegerDigits, minimumFractionDigits, minimumIntegerDigits, numberInstance, parseIntegerOnly, percentInstance, roundingMode, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonNumberFormat {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    availableLocales: ").append(toIndentedString(availableLocales)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    currencyInstance: ").append(toIndentedString(currencyInstance)).append("\n");
    sb.append("    groupingUsed: ").append(toIndentedString(groupingUsed)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    integerInstance: ").append(toIndentedString(integerInstance)).append("\n");
    sb.append("    maximumFractionDigits: ").append(toIndentedString(maximumFractionDigits)).append("\n");
    sb.append("    maximumIntegerDigits: ").append(toIndentedString(maximumIntegerDigits)).append("\n");
    sb.append("    minimumFractionDigits: ").append(toIndentedString(minimumFractionDigits)).append("\n");
    sb.append("    minimumIntegerDigits: ").append(toIndentedString(minimumIntegerDigits)).append("\n");
    sb.append("    numberInstance: ").append(toIndentedString(numberInstance)).append("\n");
    sb.append("    parseIntegerOnly: ").append(toIndentedString(parseIntegerOnly)).append("\n");
    sb.append("    percentInstance: ").append(toIndentedString(percentInstance)).append("\n");
    sb.append("    roundingMode: ").append(toIndentedString(roundingMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
