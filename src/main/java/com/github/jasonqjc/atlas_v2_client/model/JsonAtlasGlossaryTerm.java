/*
 * Atlas REST API
 * Atlas exposes a variety of REST endpoints to work with types, entities, lineage and data discovery.
 *
 * OpenAPI spec version: 3.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.jasonqjc.atlas_v2_client.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * JsonAtlasGlossaryTerm
 */


public class JsonAtlasGlossaryTerm extends JsonAtlasGlossaryBaseObject {
  @JsonProperty("abbreviation")
  private String abbreviation = null;

  @JsonProperty("anchor")
  private JsonAtlasGlossaryHeader anchor = null;

  @JsonProperty("antonyms")
  private List<JsonAtlasRelatedTermHeader> antonyms = null;

  @JsonProperty("assignedEntities")
  private List<JsonAtlasRelatedObjectId> assignedEntities = null;

  @JsonProperty("categories")
  private List<JsonAtlasTermCategorizationHeader> categories = null;

  @JsonProperty("classifies")
  private List<JsonAtlasRelatedTermHeader> classifies = null;

  @JsonProperty("examples")
  private List<String> examples = null;

  @JsonProperty("isA")
  private List<JsonAtlasRelatedTermHeader> isA = null;

  @JsonProperty("preferredTerms")
  private List<JsonAtlasRelatedTermHeader> preferredTerms = null;

  @JsonProperty("preferredToTerms")
  private List<JsonAtlasRelatedTermHeader> preferredToTerms = null;

  @JsonProperty("replacedBy")
  private List<JsonAtlasRelatedTermHeader> replacedBy = null;

  @JsonProperty("replacementTerms")
  private List<JsonAtlasRelatedTermHeader> replacementTerms = null;

  @JsonProperty("seeAlso")
  private List<JsonAtlasRelatedTermHeader> seeAlso = null;

  @JsonProperty("synonyms")
  private List<JsonAtlasRelatedTermHeader> synonyms = null;

  @JsonProperty("translatedTerms")
  private List<JsonAtlasRelatedTermHeader> translatedTerms = null;

  @JsonProperty("translationTerms")
  private List<JsonAtlasRelatedTermHeader> translationTerms = null;

  @JsonProperty("usage")
  private String usage = null;

  @JsonProperty("validValues")
  private List<JsonAtlasRelatedTermHeader> validValues = null;

  @JsonProperty("validValuesFor")
  private List<JsonAtlasRelatedTermHeader> validValuesFor = null;

  public JsonAtlasGlossaryTerm abbreviation(String abbreviation) {
    this.abbreviation = abbreviation;
    return this;
  }

   /**
   * Get abbreviation
   * @return abbreviation
  **/
  @Schema(description = "")
  public String getAbbreviation() {
    return abbreviation;
  }

  public void setAbbreviation(String abbreviation) {
    this.abbreviation = abbreviation;
  }

  public JsonAtlasGlossaryTerm anchor(JsonAtlasGlossaryHeader anchor) {
    this.anchor = anchor;
    return this;
  }

   /**
   * Get anchor
   * @return anchor
  **/
  @Schema(description = "")
  public JsonAtlasGlossaryHeader getAnchor() {
    return anchor;
  }

  public void setAnchor(JsonAtlasGlossaryHeader anchor) {
    this.anchor = anchor;
  }

  public JsonAtlasGlossaryTerm antonyms(List<JsonAtlasRelatedTermHeader> antonyms) {
    this.antonyms = antonyms;
    return this;
  }

  public JsonAtlasGlossaryTerm addAntonymsItem(JsonAtlasRelatedTermHeader antonymsItem) {
    if (this.antonyms == null) {
      this.antonyms = new ArrayList<JsonAtlasRelatedTermHeader>();
    }
    this.antonyms.add(antonymsItem);
    return this;
  }

   /**
   * Get antonyms
   * @return antonyms
  **/
  @Schema(description = "")
  public List<JsonAtlasRelatedTermHeader> getAntonyms() {
    return antonyms;
  }

  public void setAntonyms(List<JsonAtlasRelatedTermHeader> antonyms) {
    this.antonyms = antonyms;
  }

  public JsonAtlasGlossaryTerm assignedEntities(List<JsonAtlasRelatedObjectId> assignedEntities) {
    this.assignedEntities = assignedEntities;
    return this;
  }

  public JsonAtlasGlossaryTerm addAssignedEntitiesItem(JsonAtlasRelatedObjectId assignedEntitiesItem) {
    if (this.assignedEntities == null) {
      this.assignedEntities = new ArrayList<JsonAtlasRelatedObjectId>();
    }
    this.assignedEntities.add(assignedEntitiesItem);
    return this;
  }

   /**
   * Get assignedEntities
   * @return assignedEntities
  **/
  @Schema(description = "")
  public List<JsonAtlasRelatedObjectId> getAssignedEntities() {
    return assignedEntities;
  }

  public void setAssignedEntities(List<JsonAtlasRelatedObjectId> assignedEntities) {
    this.assignedEntities = assignedEntities;
  }

  public JsonAtlasGlossaryTerm categories(List<JsonAtlasTermCategorizationHeader> categories) {
    this.categories = categories;
    return this;
  }

  public JsonAtlasGlossaryTerm addCategoriesItem(JsonAtlasTermCategorizationHeader categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<JsonAtlasTermCategorizationHeader>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @Schema(description = "")
  public List<JsonAtlasTermCategorizationHeader> getCategories() {
    return categories;
  }

  public void setCategories(List<JsonAtlasTermCategorizationHeader> categories) {
    this.categories = categories;
  }

  public JsonAtlasGlossaryTerm classifies(List<JsonAtlasRelatedTermHeader> classifies) {
    this.classifies = classifies;
    return this;
  }

  public JsonAtlasGlossaryTerm addClassifiesItem(JsonAtlasRelatedTermHeader classifiesItem) {
    if (this.classifies == null) {
      this.classifies = new ArrayList<JsonAtlasRelatedTermHeader>();
    }
    this.classifies.add(classifiesItem);
    return this;
  }

   /**
   * Get classifies
   * @return classifies
  **/
  @Schema(description = "")
  public List<JsonAtlasRelatedTermHeader> getClassifies() {
    return classifies;
  }

  public void setClassifies(List<JsonAtlasRelatedTermHeader> classifies) {
    this.classifies = classifies;
  }

  public JsonAtlasGlossaryTerm examples(List<String> examples) {
    this.examples = examples;
    return this;
  }

  public JsonAtlasGlossaryTerm addExamplesItem(String examplesItem) {
    if (this.examples == null) {
      this.examples = new ArrayList<String>();
    }
    this.examples.add(examplesItem);
    return this;
  }

   /**
   * Get examples
   * @return examples
  **/
  @Schema(description = "")
  public List<String> getExamples() {
    return examples;
  }

  public void setExamples(List<String> examples) {
    this.examples = examples;
  }

  public JsonAtlasGlossaryTerm isA(List<JsonAtlasRelatedTermHeader> isA) {
    this.isA = isA;
    return this;
  }

  public JsonAtlasGlossaryTerm addIsAItem(JsonAtlasRelatedTermHeader isAItem) {
    if (this.isA == null) {
      this.isA = new ArrayList<JsonAtlasRelatedTermHeader>();
    }
    this.isA.add(isAItem);
    return this;
  }

   /**
   * Get isA
   * @return isA
  **/
  @Schema(description = "")
  public List<JsonAtlasRelatedTermHeader> getIsA() {
    return isA;
  }

  public void setIsA(List<JsonAtlasRelatedTermHeader> isA) {
    this.isA = isA;
  }

  public JsonAtlasGlossaryTerm preferredTerms(List<JsonAtlasRelatedTermHeader> preferredTerms) {
    this.preferredTerms = preferredTerms;
    return this;
  }

  public JsonAtlasGlossaryTerm addPreferredTermsItem(JsonAtlasRelatedTermHeader preferredTermsItem) {
    if (this.preferredTerms == null) {
      this.preferredTerms = new ArrayList<JsonAtlasRelatedTermHeader>();
    }
    this.preferredTerms.add(preferredTermsItem);
    return this;
  }

   /**
   * Get preferredTerms
   * @return preferredTerms
  **/
  @Schema(description = "")
  public List<JsonAtlasRelatedTermHeader> getPreferredTerms() {
    return preferredTerms;
  }

  public void setPreferredTerms(List<JsonAtlasRelatedTermHeader> preferredTerms) {
    this.preferredTerms = preferredTerms;
  }

  public JsonAtlasGlossaryTerm preferredToTerms(List<JsonAtlasRelatedTermHeader> preferredToTerms) {
    this.preferredToTerms = preferredToTerms;
    return this;
  }

  public JsonAtlasGlossaryTerm addPreferredToTermsItem(JsonAtlasRelatedTermHeader preferredToTermsItem) {
    if (this.preferredToTerms == null) {
      this.preferredToTerms = new ArrayList<JsonAtlasRelatedTermHeader>();
    }
    this.preferredToTerms.add(preferredToTermsItem);
    return this;
  }

   /**
   * Get preferredToTerms
   * @return preferredToTerms
  **/
  @Schema(description = "")
  public List<JsonAtlasRelatedTermHeader> getPreferredToTerms() {
    return preferredToTerms;
  }

  public void setPreferredToTerms(List<JsonAtlasRelatedTermHeader> preferredToTerms) {
    this.preferredToTerms = preferredToTerms;
  }

  public JsonAtlasGlossaryTerm replacedBy(List<JsonAtlasRelatedTermHeader> replacedBy) {
    this.replacedBy = replacedBy;
    return this;
  }

  public JsonAtlasGlossaryTerm addReplacedByItem(JsonAtlasRelatedTermHeader replacedByItem) {
    if (this.replacedBy == null) {
      this.replacedBy = new ArrayList<JsonAtlasRelatedTermHeader>();
    }
    this.replacedBy.add(replacedByItem);
    return this;
  }

   /**
   * Get replacedBy
   * @return replacedBy
  **/
  @Schema(description = "")
  public List<JsonAtlasRelatedTermHeader> getReplacedBy() {
    return replacedBy;
  }

  public void setReplacedBy(List<JsonAtlasRelatedTermHeader> replacedBy) {
    this.replacedBy = replacedBy;
  }

  public JsonAtlasGlossaryTerm replacementTerms(List<JsonAtlasRelatedTermHeader> replacementTerms) {
    this.replacementTerms = replacementTerms;
    return this;
  }

  public JsonAtlasGlossaryTerm addReplacementTermsItem(JsonAtlasRelatedTermHeader replacementTermsItem) {
    if (this.replacementTerms == null) {
      this.replacementTerms = new ArrayList<JsonAtlasRelatedTermHeader>();
    }
    this.replacementTerms.add(replacementTermsItem);
    return this;
  }

   /**
   * Get replacementTerms
   * @return replacementTerms
  **/
  @Schema(description = "")
  public List<JsonAtlasRelatedTermHeader> getReplacementTerms() {
    return replacementTerms;
  }

  public void setReplacementTerms(List<JsonAtlasRelatedTermHeader> replacementTerms) {
    this.replacementTerms = replacementTerms;
  }

  public JsonAtlasGlossaryTerm seeAlso(List<JsonAtlasRelatedTermHeader> seeAlso) {
    this.seeAlso = seeAlso;
    return this;
  }

  public JsonAtlasGlossaryTerm addSeeAlsoItem(JsonAtlasRelatedTermHeader seeAlsoItem) {
    if (this.seeAlso == null) {
      this.seeAlso = new ArrayList<JsonAtlasRelatedTermHeader>();
    }
    this.seeAlso.add(seeAlsoItem);
    return this;
  }

   /**
   * Get seeAlso
   * @return seeAlso
  **/
  @Schema(description = "")
  public List<JsonAtlasRelatedTermHeader> getSeeAlso() {
    return seeAlso;
  }

  public void setSeeAlso(List<JsonAtlasRelatedTermHeader> seeAlso) {
    this.seeAlso = seeAlso;
  }

  public JsonAtlasGlossaryTerm synonyms(List<JsonAtlasRelatedTermHeader> synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  public JsonAtlasGlossaryTerm addSynonymsItem(JsonAtlasRelatedTermHeader synonymsItem) {
    if (this.synonyms == null) {
      this.synonyms = new ArrayList<JsonAtlasRelatedTermHeader>();
    }
    this.synonyms.add(synonymsItem);
    return this;
  }

   /**
   * Get synonyms
   * @return synonyms
  **/
  @Schema(description = "")
  public List<JsonAtlasRelatedTermHeader> getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(List<JsonAtlasRelatedTermHeader> synonyms) {
    this.synonyms = synonyms;
  }

  public JsonAtlasGlossaryTerm translatedTerms(List<JsonAtlasRelatedTermHeader> translatedTerms) {
    this.translatedTerms = translatedTerms;
    return this;
  }

  public JsonAtlasGlossaryTerm addTranslatedTermsItem(JsonAtlasRelatedTermHeader translatedTermsItem) {
    if (this.translatedTerms == null) {
      this.translatedTerms = new ArrayList<JsonAtlasRelatedTermHeader>();
    }
    this.translatedTerms.add(translatedTermsItem);
    return this;
  }

   /**
   * Get translatedTerms
   * @return translatedTerms
  **/
  @Schema(description = "")
  public List<JsonAtlasRelatedTermHeader> getTranslatedTerms() {
    return translatedTerms;
  }

  public void setTranslatedTerms(List<JsonAtlasRelatedTermHeader> translatedTerms) {
    this.translatedTerms = translatedTerms;
  }

  public JsonAtlasGlossaryTerm translationTerms(List<JsonAtlasRelatedTermHeader> translationTerms) {
    this.translationTerms = translationTerms;
    return this;
  }

  public JsonAtlasGlossaryTerm addTranslationTermsItem(JsonAtlasRelatedTermHeader translationTermsItem) {
    if (this.translationTerms == null) {
      this.translationTerms = new ArrayList<JsonAtlasRelatedTermHeader>();
    }
    this.translationTerms.add(translationTermsItem);
    return this;
  }

   /**
   * Get translationTerms
   * @return translationTerms
  **/
  @Schema(description = "")
  public List<JsonAtlasRelatedTermHeader> getTranslationTerms() {
    return translationTerms;
  }

  public void setTranslationTerms(List<JsonAtlasRelatedTermHeader> translationTerms) {
    this.translationTerms = translationTerms;
  }

  public JsonAtlasGlossaryTerm usage(String usage) {
    this.usage = usage;
    return this;
  }

   /**
   * Get usage
   * @return usage
  **/
  @Schema(description = "")
  public String getUsage() {
    return usage;
  }

  public void setUsage(String usage) {
    this.usage = usage;
  }

  public JsonAtlasGlossaryTerm validValues(List<JsonAtlasRelatedTermHeader> validValues) {
    this.validValues = validValues;
    return this;
  }

  public JsonAtlasGlossaryTerm addValidValuesItem(JsonAtlasRelatedTermHeader validValuesItem) {
    if (this.validValues == null) {
      this.validValues = new ArrayList<JsonAtlasRelatedTermHeader>();
    }
    this.validValues.add(validValuesItem);
    return this;
  }

   /**
   * Get validValues
   * @return validValues
  **/
  @Schema(description = "")
  public List<JsonAtlasRelatedTermHeader> getValidValues() {
    return validValues;
  }

  public void setValidValues(List<JsonAtlasRelatedTermHeader> validValues) {
    this.validValues = validValues;
  }

  public JsonAtlasGlossaryTerm validValuesFor(List<JsonAtlasRelatedTermHeader> validValuesFor) {
    this.validValuesFor = validValuesFor;
    return this;
  }

  public JsonAtlasGlossaryTerm addValidValuesForItem(JsonAtlasRelatedTermHeader validValuesForItem) {
    if (this.validValuesFor == null) {
      this.validValuesFor = new ArrayList<JsonAtlasRelatedTermHeader>();
    }
    this.validValuesFor.add(validValuesForItem);
    return this;
  }

   /**
   * Get validValuesFor
   * @return validValuesFor
  **/
  @Schema(description = "")
  public List<JsonAtlasRelatedTermHeader> getValidValuesFor() {
    return validValuesFor;
  }

  public void setValidValuesFor(List<JsonAtlasRelatedTermHeader> validValuesFor) {
    this.validValuesFor = validValuesFor;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonAtlasGlossaryTerm jsonAtlasGlossaryTerm = (JsonAtlasGlossaryTerm) o;
    return Objects.equals(this.abbreviation, jsonAtlasGlossaryTerm.abbreviation) &&
        Objects.equals(this.anchor, jsonAtlasGlossaryTerm.anchor) &&
        Objects.equals(this.antonyms, jsonAtlasGlossaryTerm.antonyms) &&
        Objects.equals(this.assignedEntities, jsonAtlasGlossaryTerm.assignedEntities) &&
        Objects.equals(this.categories, jsonAtlasGlossaryTerm.categories) &&
        Objects.equals(this.classifies, jsonAtlasGlossaryTerm.classifies) &&
        Objects.equals(this.examples, jsonAtlasGlossaryTerm.examples) &&
        Objects.equals(this.isA, jsonAtlasGlossaryTerm.isA) &&
        Objects.equals(this.preferredTerms, jsonAtlasGlossaryTerm.preferredTerms) &&
        Objects.equals(this.preferredToTerms, jsonAtlasGlossaryTerm.preferredToTerms) &&
        Objects.equals(this.replacedBy, jsonAtlasGlossaryTerm.replacedBy) &&
        Objects.equals(this.replacementTerms, jsonAtlasGlossaryTerm.replacementTerms) &&
        Objects.equals(this.seeAlso, jsonAtlasGlossaryTerm.seeAlso) &&
        Objects.equals(this.synonyms, jsonAtlasGlossaryTerm.synonyms) &&
        Objects.equals(this.translatedTerms, jsonAtlasGlossaryTerm.translatedTerms) &&
        Objects.equals(this.translationTerms, jsonAtlasGlossaryTerm.translationTerms) &&
        Objects.equals(this.usage, jsonAtlasGlossaryTerm.usage) &&
        Objects.equals(this.validValues, jsonAtlasGlossaryTerm.validValues) &&
        Objects.equals(this.validValuesFor, jsonAtlasGlossaryTerm.validValuesFor) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abbreviation, anchor, antonyms, assignedEntities, categories, classifies, examples, isA, preferredTerms, preferredToTerms, replacedBy, replacementTerms, seeAlso, synonyms, translatedTerms, translationTerms, usage, validValues, validValuesFor, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonAtlasGlossaryTerm {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    abbreviation: ").append(toIndentedString(abbreviation)).append("\n");
    sb.append("    anchor: ").append(toIndentedString(anchor)).append("\n");
    sb.append("    antonyms: ").append(toIndentedString(antonyms)).append("\n");
    sb.append("    assignedEntities: ").append(toIndentedString(assignedEntities)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    classifies: ").append(toIndentedString(classifies)).append("\n");
    sb.append("    examples: ").append(toIndentedString(examples)).append("\n");
    sb.append("    isA: ").append(toIndentedString(isA)).append("\n");
    sb.append("    preferredTerms: ").append(toIndentedString(preferredTerms)).append("\n");
    sb.append("    preferredToTerms: ").append(toIndentedString(preferredToTerms)).append("\n");
    sb.append("    replacedBy: ").append(toIndentedString(replacedBy)).append("\n");
    sb.append("    replacementTerms: ").append(toIndentedString(replacementTerms)).append("\n");
    sb.append("    seeAlso: ").append(toIndentedString(seeAlso)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("    translatedTerms: ").append(toIndentedString(translatedTerms)).append("\n");
    sb.append("    translationTerms: ").append(toIndentedString(translationTerms)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    validValues: ").append(toIndentedString(validValues)).append("\n");
    sb.append("    validValuesFor: ").append(toIndentedString(validValuesFor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
